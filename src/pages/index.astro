---
import Layout from "@/layouts/Layout.astro";
import profileImg from "@/assets/profile.png";
import { Image } from "astro:assets";
import { CircleChevronRight, CircleChevronLeft, Globe } from "lucide-react";
import { getFeaturedProjectUseCase } from "@/server/use-case/project";
import { GithubIcon } from "@/components/svg/SocialIcons";
import { TECH_STACKS } from "@/lib/constants";

const project = await getFeaturedProjectUseCase();
---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const cardsParent = document.getElementById("cards-parent");
    const projectCards = cardsParent?.querySelectorAll(".projectCard");

    let initialRotation = 0;
    let currFacingCard = 0;

    if (projectCards?.[0] && projectCards[0] instanceof HTMLElement) {
      projectCards?.[currFacingCard]?.setAttribute("data-enter", "true");
    }
    document.addEventListener("click", (event) => {
      const target = event.target as HTMLElement;
      const buttonId = target.closest("button")?.id;
      const projectCount = target.closest("button")?.dataset.length || "0";
      const currProjCount = parseInt(projectCount, 10);
      const currentRotationDeg = 360 / currProjCount;
      const style = document.documentElement.style;

      if (buttonId === "next") {
        //set to false before we go to next card
        projectCards?.[currFacingCard]?.setAttribute("data-enter", "false");

        currFacingCard = ++currFacingCard % currProjCount;
        Math.floor((initialRotation -= currentRotationDeg));
        projectCards?.[currFacingCard]?.setAttribute("data-enter", "true");
      }
      if (buttonId === "prev") {
        projectCards?.[currFacingCard]?.setAttribute("data-enter", "false");
        currFacingCard =
          currFacingCard === 0
            ? (currProjCount - 1) % currProjCount
            : --currFacingCard % currProjCount;
        Math.floor((initialRotation += currentRotationDeg));
        projectCards?.[currFacingCard]?.setAttribute("data-enter", "true");
      }

      style.setProperty("--current-rotation-value", `${initialRotation}deg`);
    });
  });
</script>

<Layout title="HomePage">
  <section class="flex size-full flex-col items-center gap-8 text-clip md:gap-4">
    <article class="w-fit gap-4 sm:grid sm:justify-center sm:gap-x-4 xl:gap-x-8 xl:p-2">
      <h1 class="text-3xl sm:col-start-2 sm:self-end sm:justify-self-start md:text-4xl">
        Hi, I am <strong class="block">Churchill Jay Sungcados</strong>
      </h1>
      <p
        class="my-4 inline-block bg-rose-500 p-2 text-lg font-semibold text-gray-50 sm:col-start-1 sm:col-end-3 sm:row-start-2 sm:self-start sm:text-end md:py-2 md:text-2xl"
      >
        A Font-End Developer
      </p>
      <Image
        src={profileImg}
        alt="profile picture for portfolio"
        class="sm:relative sm:z-10 sm:col-start-1 sm:row-start-1 sm:row-end-3 sm:w-11/12 sm:justify-self-end md:z-0 md:w-5/6"
      />
    </article>

    <aside class="grid-custom-template relative grid grow px-4">
      <h2
        class:list={[
          "absolute bottom-[calc(100%-1rem)] md:bottom-[calc(100%-4rem)] lg:bottom-[calc(100%-3rem)] text-5xl md:text-7xl font-bold text-primary",
          "after:absolute  after:font-bold after:inset-0 after:content-[attr(data-title)] after:z-10 after:[-webkit-text-stroke:2px_hsl(var(--foreground))] after:[text-stroke:2px_hsla(var(--foreground))] after:text-transparent ",
        ]}
        data-title="Featured"
      >
        Featured
      </h2>

      <div
        class="group relative z-[2] h-full w-[clamp(20rem,100%,64rem)] overflow-hidden md:overflow-visible"
      >
        <button
          id="prev"
          class:list={[
            "absolute left-0 top-1/2 z-10 h-1/4 w-fit -translate-y-1/2 border p-1 backdrop-blur-md active:scale-95 md:p-2 lg:p-4",
            "group-hover:block group-focus-visible:block hocus-visible:outline hocus-visible:outline-1 hoverable:hidden ",
          ]}
          data-length={project.length}
          ><CircleChevronLeft className=" hocus-visible:scale-110 md:size-8" /></button
        >
        <button
          id="next"
          class:list={[
            "absolute right-0 top-1/2 z-10 h-1/4 w-fit -translate-y-1/2 border p-1 backdrop-blur-md active:scale-95 md:p-2 lg:p-4",
            "group-hover:block group-focus-visible:block hocus-visible:outline hocus-visible:outline-1 hoverable:hidden",
          ]}
          data-length={project.length}
          ><CircleChevronRight className="hocus-visible:scale-110 md:size-8" /></button
        >
        <div
          id="cards-parent"
          class:list={" size-full custom-div grid place-items-center"}
          style=`--quantity:${project.length}`
        >
          {
            project.map(({ description, name, imageUrl, liveUrl, repoUrl, techStacks }, index) => {
              const techStacksArrFiltered = TECH_STACKS.filter((stack) =>
                techStacks.includes(stack.stackName)
              );
              return (
                <div
                  data-enter={false}
                  class:list={[
                    "size-full flex flex-col justify-around p-4 shadow-elevate-light backdrop-blur dark:shadow-elevate-dark text-foreground ",
                    "projectCard relative custom-item bg-background [grid-area:1/1] [backface-visibility:hidden] lg:[backface-visibility:visible] ",
                    "exit-animation  enter-animation ",
                  ]}
                  style={`--position:${index + 1}`}
                >
                  <Image
                    class:list={[" w-full rounded-lg object-cover aspect-video object-center"]}
                    src={imageUrl}
                    alt={name}
                    inferSize={true}
                  />

                  <div class:list={["sm:absolute sm:inset-0 w-full grid-custom-area "]}>
                    <div class=" flex w-full flex-wrap items-center justify-around gap-4 sm:absolute ">
                      <h3
                        class:list={[
                          "grow w-full text-center text-[clamp(.5em,5vw,3.5rem)] font-bold capitalize",
                        ]}
                      >
                        {name}
                      </h3>
                      <a
                        href={repoUrl}
                        target="_blank"
                        class=" flex items-center gap-2 text-lg transition-all hover:scale-110 focus:border-b focus:outline-none active:animate-ping"
                      >
                        <GithubIcon className="size-6 fill-foreground " />
                        repository
                      </a>
                      <a
                        href={liveUrl}
                        target="_blank"
                        class="flex items-center gap-2 text-lg transition-all hover:scale-110 focus:border-b focus:outline-none active:animate-ping"
                      >
                        <Globe className="size-6 text-foreground " />
                        live site
                      </a>
                    </div>

                    <div class="flex flex-wrap items-center justify-center gap-2 p-4 ">
                      <p class="w-full  px-4 py-2 leading-6">{description}</p>
                      <div class="hover-siblings-animation flex items-center gap-2 *:size-6">
                        {techStacksArrFiltered.map(({ href, Logo, stackName }) => (
                          <abbr title={stackName}>
                            <a href={href} target="_blank" rel="noopener noreferrer">
                              <Logo />
                            </a>
                          </abbr>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>
    </aside>
  </section>
</Layout>

<style>
  /*aside element starts here*/
  .grid-custom-template {
    gap: 1rem;
    grid-template-columns: [content-start]1fr [content-end];
    grid-template-rows:
      [ title-start content-start] auto
      [ title-end] 1fr [ content-end];
  }

  .grid-custom-template > h2 {
    place-self: center;
    grid-area: title;
  }
  .grid-custom-template > div {
    place-self: center;
    grid-area: content;
  }

  /*aside element ends here*/

  /*Cards sphere style starts here*/
  @property --current-rotation-value {
    syntax: "<angle>";
    inherits: true;
    initial-value: 0deg;
  }
  .custom-div {
    transform-style: preserve-3d;
    transition: transform 0.55s ease-in-out;
    transform: perspective(1800px) rotateY(var(--current-rotation-value));
  }
  .custom-item {
    transform: rotateY(calc((var(--position) - 1) * (360 / var(--quantity)) * 1deg))
      translateZ(350px) scaleX(0.8) scaleY(0.8);
  }

  @media (min-width: 768px) {
    .custom-item {
      transform: rotateY(calc((var(--position) - 1) * (360 / var(--quantity)) * 1deg))
        translateZ(250px) scaleX(0.7) scaleY(0.7);
    }
  }
  @media (min-width: 1024px) {
    .custom-item {
      transform: rotateY(calc((var(--position) - 1) * (360 / var(--quantity)) * 1deg))
        translateZ(400px) scaleX(0.7) scaleY(0.7);
    }
  }

  @media (min-width: 1536px) {
    .custom-item {
      transform: rotateY(calc((var(--position) - 1) * (360 / var(--quantity)) * 1deg))
        translateZ(450px) scaleX(0.7) scaleY(0.7);
    }
  }
  /*Cards sphere style ends here*/

  /*mapped Cards styling and layout starts here*/
  .grid-custom-area {
    display: grid;
    grid-template-rows:
      [ links-start]1fr[ links-end description-start stacks-start]
      auto[description-end starts-end];
    grid-template-columns: [ links-start description-start]1fr[ links-end] auto[description-end];
  }
  @media (min-width: 640px) {
    .grid-custom-area {
      grid-template-columns: [ links-start description-start]1fr[ links-end] 1fr[description-end];
    }
  }
  .grid-custom-area > div:nth-of-type(1) {
    grid-area: links;
    place-self: end stretch;
  }

  .grid-custom-area > div:nth-of-type(2) {
    place-self: center stretch;
    grid-area: description;
  }

  /*to hide the cards that is not in front*/
  .enter-animation:not([data-enter="true"]) > div > div:nth-of-type(1),
  .enter-animation:not([data-enter="true"]) > div > div:nth-of-type(2) {
    display: none;
  }

  .enter-animation[data-enter="true"] > div > div:nth-of-type(1),
  .enter-animation[data-enter="true"] > div > div:nth-of-type(2) {
    /*animation: enter 500ms linear 600ms 1 forwards;*/

    transition-property: opacity transform filter;
    transition-duration: 500ms;
    transition-timing-function: linear;
    transition-delay: 600ms;
    transform: translateY(0);
    display: flex;
    opacity: 1;
    filter: blur(0);

    @starting-style {
      opacity: 0;
      transform: translateY(20%);
      filter: blur(2px);
    }
  }

  .enter-animation[data-enter="true"] > div > div:nth-of-type(1) {
    /*animation: enter 500ms linear 700ms 1 forwards;*/
    transition-delay: 700ms;
  }

  @keyframes enter {
    to {
      transform: translateY(0);
      display: flex;
      opacity: 1;
      filter: blur(0);
    }
  }
  @media (prefers-reduced-motion) {
    .enter-animation[data-enter="true"] > div > div:nth-of-type(1),
    .enter-animation[data-enter="true"] > div > div:nth-of-type(2) {
      opacity: 1;
      transform: translateY(0);
      filter: blur(0);
    }
  }
</style>

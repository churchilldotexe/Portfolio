---
import ProjectCard from "@/components/ProjectCard.astro";
import Layout from "../../layouts/Layout.astro";
import profileImg from "@/assets/profile.png";
import { getAllProjects } from "@/server/use-case/project";

const project = await getAllProjects();

export const projectArr = [
  { id: 1, profileImg, projectName: "Project 1", description: "Project description" },
  { id: 2, profileImg, projectName: "Project 2", description: "Project description" },
  { id: 3, profileImg, projectName: "Project 3", description: "Project description" },
  { id: 4, profileImg, projectName: "Project 4", description: "Project description" },
  { id: 5, profileImg, projectName: "Project 5", description: "Project description" },
  { id: 6, profileImg, projectName: "Project 6", description: "Project description" },
];
---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const projectDiv = document.getElementById("project-section") as HTMLElement;
    if (projectDiv) {
      projectDiv.addEventListener("mousemove", (event) => {
        const x = event.clientX;
        const y = event.clientY;

        projectDiv.style.setProperty("--mouse-x", `${x}px`);
        projectDiv.style.setProperty("--mouse-y", `${y}px`);
      });

      projectDiv.addEventListener("click", (event) => {
        const target = event.target;
        if (target instanceof Element) {
          const openButton = target.closest(".open-dialog");
          if (openButton) {
            const dialog = openButton.nextElementSibling as HTMLDialogElement;
            const dialogId = dialog.id;
            if (dialog && dialog.tagName === "DIALOG") {
              history.pushState(null, "", `/projects/${dialogId}`);
              dialog.showModal();
            }
          }

          if (target.closest(".close-dialog")) {
            target.closest("dialog")?.close();
            history.back();
          }

          if (target.tagName === "DIALOG") {
            target.closest("dialog")?.close();
            history.back();
          }
        }
      });
    }
  });
</script>

<Layout title="Projects">
  <section
    class="grid grid-cols-[repeat(auto-fit,minmax(400px,1fr))] gap-4 p-4"
    id="project-section"
  >
    {
      project.map(({ name, description, liveUrl, repoUrl, imageUrl, imageKey }) => (
        <div
          class:list={[
            "  rounded-md after:rounded-md relative bg-fixed after:hover:bg-foreground/50 after:shadow-elevate-light after:dark:shadow-elevate-dark bg-radial hover:backdrop-grayscale",
          ]}
        >
          <button class="open-dialog">
            <ProjectCard
              description={description}
              repoUrl={repoUrl}
              siteUrl={liveUrl}
              projectName={name}
              profileImg={imageUrl}
              cardId={imageKey}
              class:list="bg-radial-front rounded-md bg-background bg-fixed shadow-none dark:shadow-none"
            />
          </button>
          <dialog id={imageKey}>
            <ProjectCard
              description={description}
              repoUrl={repoUrl}
              siteUrl={liveUrl}
              projectName={name}
              profileImg={imageUrl}
              cardId={imageKey}
              class:list="  bg-radial-front rounded-md bg-background bg-fixed shadow-none dark:shadow-none"
            />
            <button id={imageKey} class="close-dialog">
              close
            </button>
          </dialog>
        </div>
      ))
    }
  </section>
</Layout>

<style>
  @property --mouse-x {
    syntax: "<length>";
    inherits: false;
    initial-value: 50%;
  }

  @property --mouse-y {
    syntax: "<length>";
    inherits: false;
    initial-value: 50%;
  }

  @media (hover: hover) {
    .bg-radial-front {
      background-image: radial-gradient(
        8rem circle at var(--mouse-x) var(--mouse-y),
        hsl(var(--foreground) / 0.1),
        hsl(var(--foreground) / 0.0125)
      );
    }

    .bg-radial::after {
      content: "";
      position: absolute;
      inset: -2px;
      background-attachment: fixed;
      background-image: radial-gradient(
        circle at var(--mouse-x) var(--mouse-y),
        hsl(var(--primary)),
        transparent 10rem
      );
      pointer-events: none;
      z-index: -1;
    }
  }

  @media (hover: none) {
    .bg-radial::after {
      content: "";
      position: absolute;
      inset: -2px;
      pointer-events: none;
      z-index: -1;
    }
  }
</style>

---
import ProjectCard from "@/components/ProjectCard.astro";
import Layout from "../../layouts/Layout.astro";
import { getAllProjects } from "@/server/use-case/project";

const project = await getAllProjects();
---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const projectDiv = document.getElementById("project-section") as HTMLElement;
    if (projectDiv) {
      projectDiv.addEventListener("mousemove", (event) => {
        const x = event.clientX;
        const y = event.clientY;

        projectDiv.style.setProperty("--mouse-x", `${x}px`);
        projectDiv.style.setProperty("--mouse-y", `${y}px`);
      });

      projectDiv.addEventListener("click", (event) => {
        const target = event.target;
        if (target instanceof Element) {
          const openButton = target.closest(".open-dialog");
          if (openButton) {
            const dialog = openButton.nextElementSibling as HTMLDialogElement;
            const dialogId = dialog.id;

            if (dialog && dialog.tagName === "DIALOG") {
              history.pushState(null, "", `/projects/${dialogId}`);

              const rect = openButton.getBoundingClientRect();
              dialog.style.setProperty("--click-x", `${rect.left}px`);
              dialog.style.setProperty("--click-y", `${rect.top}px`);

              dialog.showModal();
            }
          }

          if (target.closest(".close-dialog")) {
            target.closest("dialog")?.close();
            history.back();
          }

          if (target.tagName === "DIALOG") {
            target.closest("dialog")?.close();
            history.back();
          }
          console.log(target.clientTop, "y");
          console.log(target.clientLeft, "x");
        }
      });
    }
  });
</script>

<Layout title="Projects">
  <section
    class="grid grid-cols-[repeat(auto-fit,minmax(400px,1fr))] gap-4 p-4"
    id="project-section"
  >
    {
      project.map(({ name, description, liveUrl, repoUrl, imageUrl, imageKey }) => (
        <div
          class:list={[
            "rounded-md after:rounded-md relative bg-fixed after:hover:bg-foreground/50 after:hover:mix-blend-multiply after:shadow-elevate-light after:dark:shadow-elevate-dark bg-radial hover:backdrop-grayscale",
          ]}
        >
          <button class="btn-animate open-dialog size-full ">
            <ProjectCard
              description={description}
              repoUrl={repoUrl}
              siteUrl={liveUrl}
              projectName={name}
              profileImg={imageUrl}
              cardId={imageKey}
              class:list="  bg-radial-front hover:filter rounded-md bg-background bg-fixed shadow-none dark:shadow-none"
            />
          </button>
          <dialog
            id={imageKey}
            class=" dialog-animate mx-auto max-w-3xl gap-4 rounded-md shadow-elevate-light backdrop:bg-background/15 backdrop:backdrop-blur-sm dark:shadow-elevate-dark"
          >
            <ProjectCard
              description={description}
              repoUrl={repoUrl}
              siteUrl={liveUrl}
              projectName={name}
              profileImg={imageUrl}
              cardId={imageKey}
              class:list=" rounded-md bg-background bg-fixed shadow-none dark:shadow-none  gap-2"
            >
              <button id={imageKey} class="close-dialog self-start">
                &larr; go back
              </button>
            </ProjectCard>
          </dialog>
        </div>
      ))
    }
  </section>
</Layout>

<style>
  @property --mouse-x {
    syntax: "<length>";
    inherits: false;
    initial-value: 50%;
  }

  @property --mouse-y {
    syntax: "<length>";
    inherits: false;
    initial-value: 50%;
  }

  @property --click-x {
    syntax: "<length>";
    inherits: false;
    initial-value: 50%;
  }

  @property --click-y {
    syntax: "<length>";
    inherits: false;
    initial-value: 50%;
  }

  @media (hover: hover) {
    .dialog-animate {
      transition-property: translate scale;
      transition-duration: 0.5s;
      transition-timing-function: ease-in-out;
      @starting-style {
        translate: calc(var(--click-x) - 50%) calc(var(--click-y) - 50%);
        scale: 0.5;
      }
    }

    .bg-radial-front {
      background-image: radial-gradient(
        8rem circle at var(--mouse-x) var(--mouse-y),
        hsl(var(--foreground) / 0.1),
        hsl(var(--foreground) / 0.0125)
      );
    }

    .bg-radial::after {
      content: "";
      position: absolute;
      inset: -2px;
      background-attachment: fixed;
      background-image: radial-gradient(
        circle at var(--mouse-x) var(--mouse-y),
        hsl(var(--primary)),
        transparent 10rem
      );
      pointer-events: none;
      z-index: -1;
    }
  }

  @media (hover: none) {
    .bg-radial::after {
      content: "";
      position: absolute;
      inset: -2px;
      pointer-events: none;
      z-index: -1;
    }
  }
</style>

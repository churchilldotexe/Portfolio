---
import ProjectCard from "@/components/ProjectCard.astro";
import Layout from "../../layouts/Layout.astro";
import { getAllProjects } from "@/server/use-case/project";

const project = await getAllProjects();
---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const projectDiv = document.getElementById("project-section") as HTMLElement;
    if (projectDiv) {
      projectDiv.addEventListener("mousemove", (event) => {
        const x = event.clientX;
        const y = event.clientY;

        projectDiv.style.setProperty("--mouse-x", `${x}px`);
        projectDiv.style.setProperty("--mouse-y", `${y}px`);
      });

      projectDiv.addEventListener("click", (event) => {
        const target = event.target;

        if (target instanceof Element) {
          const openButton = target.closest(".open-dialog");
          if (openButton) {
            const dialog = openButton.previousElementSibling as HTMLDialogElement;
            const dialogId = dialog.id;

            if (dialog && dialog.tagName === "DIALOG") {
              dialog.showModal();
              history.pushState(null, "", `/projects/${dialogId}`);
            }
          }

          if (target.closest(".close-dialog")) {
            target.closest("dialog")?.close();
            history.back();
          }

          if (target.tagName === "DIALOG") {
            target.closest("dialog")?.close();
            history.back();
          }
        }
      });
    }
  });
</script>

<Layout title="Projects">
  <section
    class="grid grid-cols-[repeat(auto-fit,minmax(500px,1fr))] gap-4 p-4"
    id="project-section"
  >
    {
      project.map(({ name, description, liveUrl, repoUrl, imageUrl, imageKey, techStacks }) => (
        <div
          class:list={[
            "size-full rounded-md  relative bg-fixed",
            "after:rounded-md after:not-hoverable:shadow-elevate-light after:not-hoverable:dark:shadow-elevate-dark after:hover:shadow-elevate-light after:hover:dark:shadow-elevate-dark bg-radial after:border after:border-border before:rounded-md after:transition-shadow after:duration-500",
          ]}
        >
          <dialog
            id={imageKey}
            class:list="dialog-animate peer max-w-5xl gap-4 rounded-md bg-transparent p-4 backdrop:bg-background/15 backdrop:backdrop-blur-sm"
          >
            <ProjectCard
              techstackArr={techStacks}
              description={description}
              repoUrl={repoUrl}
              siteUrl={liveUrl}
              projectName={name}
              profileImg={imageUrl}
              cardId={imageKey}
              showDetails={true}
              class:list="rounded-md bg-background gap-2"
            >
              <button id={imageKey} class:list={["close-dialog self-start z-[1]"]}>
                &larr; go back
              </button>
            </ProjectCard>
          </dialog>
          <button
            class:list={[
              "btn-animate open-dialog visible size-full  ",
              "peer-open:scale-50  transition-[visibility_transform_opacity]  duration-300 peer-open:invisible peer-open:opacity-0 ",
            ]}
          >
            <ProjectCard
              techstackArr={techStacks}
              description={description}
              repoUrl={repoUrl}
              siteUrl={liveUrl}
              projectName={name}
              profileImg={imageUrl}
              cardId={imageKey}
              class:list="bg-radial-front rounded-md bg-background bg-fixed shadow-none dark:shadow-none"
            />
          </button>
        </div>
      ))
    }
  </section>
</Layout>

<style>
  @property --mouse-x {
    syntax: "<length>";
    inherits: false;
    initial-value: 50%;
  }

  @property --mouse-y {
    syntax: "<length>";
    inherits: false;
    initial-value: 50%;
  }

  @property --click-x {
    syntax: "<length>";
    inherits: false;
    initial-value: 50%;
  }

  @property --click-y {
    syntax: "<length>";
    inherits: false;
    initial-value: 50%;
  }

  .dialog-animate {
    transition-property: display opacity scale;
    transition-duration: 180ms;
    transition-timing-function: ease-in-out;
    transition-behavior: allow-discrete;
    scale: 0.5;
    opacity: 0;
  }

  .dialog-animate[open] {
    scale: 1;
    opacity: 1;
    @starting-style {
      scale: 0.5;
      opacity: 0.8;
    }
  }

  @media (hover: hover) {
    .bg-radial-front {
      background-image: radial-gradient(
        8rem circle at var(--mouse-x) var(--mouse-y),
        hsl(var(--foreground) / 0.1),
        hsl(var(--foreground) / 0.0125)
      );
    }

    .bg-radial::after {
      content: "";
      position: absolute;
      inset: -2px;
      background-attachment: fixed;
      background-image: radial-gradient(
        circle at var(--mouse-x) var(--mouse-y),
        hsl(var(--primary)),
        transparent 10rem
      );
      pointer-events: none;
      z-index: -1;
    }
  }

  .bg-radial::before {
    content: "";
    position: absolute;
    inset: 0;
    background-color: hsl(var(--background));
    pointer-events: none;
  }

  @media (hover: none) {
    .bg-radial::after {
      content: "";
      position: absolute;
      inset: -2px;
      pointer-events: none;
      z-index: -1;
    }
  }
</style>
